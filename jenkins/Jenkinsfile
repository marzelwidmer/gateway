pipeline {
    // Agent Maven
        agent {
            node {
                label 'maven'
            }
        }
    // Environment
    environment {
        GIT_COMMIT_SHORT = env.GIT_COMMIT.take(7)
        BRANCHES = "[[name: '*/master']]"
        GIT_LAST_COMMIT_MESSAGE = sh(script: "printf \$(git log --pretty='%s (%an)' -1)", returnStdout: true)
        GIT_TAG_MESSAGE = 'ci-release-bot'
        GIT_TAG_USER_EMAIL = "jenkins@openshift.ch"
        GIT_TAG_USER_NAME = "Jenkins"

        BUILD_ENVIRONMENT = 'build'
        DEV_ENVIRONMENT = 'dev'
        APP_NAME = 'spring-cloud-gateway'
    }
    // Stages
    stages {
        // Test and archive artifacts
        stage('Initial Resources') {
            steps {
              script {

                sh("mvn fabric8:resource -Dfabric8.namespace=$DEV_ENVIRONMENT -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true")
                sh("mvn fabric8:resource-apply -Dfabric8.namespace=$DEV_ENVIRONMENT -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true")
                sh("oc set triggers dc/$APP_NAME --from-image=$BUILD_ENVIRONMENT/$APP_NAME:latest -c $APP_NAME -n$DEV_ENVIRONMENT")

               }
            }
        }

        // Build
        stage('Build Application') {
            steps {
                script {
                    // Last Git commit
                    LAST_GIT_COMMIT = sh(
                            script: 'git --no-pager show -s --format=\'%Cblue %h %Creset %s %Cgreen %an %Creset (%ae)\'',
                            returnStdout: true
                    ).trim()
                    sh("chmod +x ./jenkins/ci-semver.sh")
                    // Compute next version
                    NEXT_VERSION = sh(script: "./jenkins/ci-semver.sh", returnStdout: true).trim()
                    echo "Branch: ${env.GIT_BRANCH}"
                    echo "Last Git commit: ${GIT_LAST_COMMIT_MESSAGE}"
                    echo "Last Git commit: ${LAST_GIT_COMMIT}"
                    echo "Last Git commit short: ${GIT_COMMIT_SHORT}"
                    echo "NEXT_VERSION : ${NEXT_VERSION}"

                    sh("./mvnw fabric8:build -X -B -U -DskipTests -Djgitver.use-version=$NEXT_VERSION  -Dfabric8.namespace=$BUILD_ENVIRONMENT")
                }
            }
        }
        // Test and archive artifacts
        stage('Test Application') {
            steps {
                echo "run tests"
                sh("./mvnw test")
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                    archiveArtifacts artifacts: 'target/**/changelog.*,target/**/*.jar', fingerprint: true, onlyIfSuccessful: true
                }
//                 success {
//                     script {
//                         echo "Create tag with version: ${NEXT_VERSION}"
//                         sh("""
//                         git config --global user.email '${GIT_TAG_USER_EMAIL}'
//                         git config --global user.name '${GIT_TAG_USER_NAME}'
//                         git config --global push.default matching
//
//
//
//                         if [ \$(git tag -l $NEXT_VERSION) ]; then
//                             echo tag exist already
//                         else
//                             git tag -a -m '${GIT_TAG_MESSAGE}' ${NEXT_VERSION}
//                             git push --follow-tags
//                         fi
//                     """)
//                     }
//                 }
            }
        }



//         stage('build and test application') {
//             steps {
//
//                 script {
//                     // Last Git commit
//                     LAST_GIT_COMMIT = sh(
//                             script: 'git --no-pager show -s --format=\'%Cblue %h %Creset %s %Cgreen %an %Creset (%ae)\'',
//                             returnStdout: true
//                     ).trim()
//                     sh("chmod +x ./jenkins/ci-semver.sh")
//                     // Compute next version
//                     NEXT_VERSION = sh(script: "./jenkins/ci-semver.sh", returnStdout: true).trim()
//                     echo "Branch: ${env.GIT_BRANCH}"
//                     echo "Last Git commit: ${GIT_LAST_COMMIT_MESSAGE}"
//                     echo "Last Git commit: ${LAST_GIT_COMMIT}"
//                     echo "Last Git commit short: ${GIT_COMMIT_SHORT}"
//                     echo "NEXT_VERSION : ${NEXT_VERSION}"
//
//                     // Maven build and test (3)
//                     sh("""
//                         echo next version will be $NEXT_VERSION
//                         ./mvnw validate --settings helsana.settings.xml
//                         ./mvnw validate --settings helsana.settings.xml -Djgitver.use-version=$NEXT_VERSION
//                         ./mvnw package --settings helsana.settings.xml -DskipTests -Djgitver.use-version=$NEXT_VERSION
//                         echo "run tests"
//                         sh './mvnw test'
//                     """)
//                     // Store Junit results (4)
//                     post {
//                         always {
//                             junit 'target/surefire-reports/*.xml'
//                         }
//                     }
//                     // Tag Git Repository (5)
//                     echo "Create tag with version: ${NEXT_VERSION}"
//                     sh("""
//                         echo set git config for tagging
//                         git config --global user.email '${GIT_TAG_USER_EMAIL}'
//                         git config --global user.name '${GIT_TAG_USER_NAME}'
//
//                         if [ \$(git tag -l $NEXT_VERSION) ]; then
//                             echo tag exist already
//                         else
//                             git tag -a -m '${GIT_TAG_MESSAGE}' ${NEXT_VERSION}
//                             git push --follow-tags
//                         fi
//                     """)
//                 }
//             }
//         }
//



               // Setup
//                 stage('Build') {
//                     steps {
//                         script {
//                             // Last Git commit
//                             LAST_GIT_COMMIT = sh(
//                                     script: 'git --no-pager show -s --format=\'%Cblue %h %Creset %s %Cgreen %an %Creset (%ae)\'',
//                                     returnStdout: true
//                             ).trim()
//                             sh("chmod +x ./jenkins/ci-semver.sh")
//                             // Compute next version
//                             NEXT_VERSION = sh(script: "./jenkins/ci-semver.sh", returnStdout: true).trim()
//                             echo "Branch: ${env.GIT_BRANCH}"
//                             echo "Last Git commit: ${GIT_LAST_COMMIT_MESSAGE}"
//                             echo "Last Git commit: ${LAST_GIT_COMMIT}"
//                             echo "Last Git commit short: ${GIT_COMMIT_SHORT}"
//                             echo "NEXT_VERSION : ${NEXT_VERSION}"
//                             sh("./mvnw -X -U -B package --settings helsana.settings.xml -DskipTests -Djgitver.use-version=$NEXT_VERSION")
//                         }
//                     }
//                 }
                // Test and archive artifacts
//                 stage('Test and Tag') {
//                     steps {
//                         echo "run tests"
//                         sh("./mvnw -U -B  test --settings helsana.settings.xml")
//                     }
//                     post {
//                         always {
//                             junit 'target/surefire-reports/*.xml'
//                             archiveArtifacts artifacts: 'target/**/changelog.*,target/**/*.jar', fingerprint: true, onlyIfSuccessful: true
//                         }
//                         success {
//                             script {
//                                 echo "Create tag with version: ${NEXT_VERSION}"
//                                 sh("""
//                                 git config --global user.email '${GIT_TAG_USER_EMAIL}'
//                                 git config --global user.name '${GIT_TAG_USER_NAME}'
//
//                                 if [ \$(git tag -l $NEXT_VERSION) ]; then
//                                     echo tag exist already
//                                 else
//                                     git tag -a -m '${GIT_TAG_MESSAGE}' ${NEXT_VERSION}
//                                     git push --follow-tags
//                                 fi
//                             """)
//                             }
//                         }
//                     }
//                 }


                // Dev Deployment
//                 stage('Deployment (dev)') {
//                     steps {
//                         sh("./mvnw -U -B  fabric8:deploy --settings helsana.settings.xml  -Pcloud  -DskipTests -Dfabric8.namespace=$DEV_ENVIRONMENT -Djgitver.use-version=$NEXT_VERSION")
//                         // Verify Deployment
//                         script {
//                             openshift.withCluster() {
//                                 openshift.withProject() {
//                                     openshiftVerifyDeployment(namespace: DEV_ENVIRONMENT,
//                                             depCfg: APP_NAME,
//                                             replicaCount: '1',
//                                             verifyReplicaCount: 'true',
//                                             waitTime: '300000')
//                                 }
//                             }
//                         }
//                     }
//                 }

                // Tag image to promote
//                 stage('tag image for testing') {
//                     steps {
//                         script {
//                             openshift.withCluster() {
//                                 openshift.withProject() {
//                                 // TODO precondition
//                                 // oc create dc medicheck-service --image=docker-registry.default.svc:5000/myhelsana-build/medicheck-service:myhelsana-test -n myhelsana-test
//                                 openshiftTag(namespace: DEV_ENVIRONMENT,
//                                             sourceStream: APP_NAME,
//                                              sourceTag: 'latest',
//                                             destinationStream: APP_NAME,
//                                             destinationTag: 'myhelsana-test')
//
// //                                   openshiftTag(namespace: DEV_ENVIRONMENT,
// //                                             sourceStream: APP_NAME,
// //                                             sourceTag: NEXT_VERSION,
// //                                             destinationStream: APP_NAME,
// //                                             destinationTag: 'testStage')
//                                 }
//                             }
//                         }
//                     }
//                 }
                // Approval
//                 stage('approve to testing') {
//                     steps {
//                         timeout(time: 2, unit: 'DAYS') {
//                             input 'Approve to testing'
//                         }
//                     }
//                 }
//                 // Testing Deployment
//                 stage('deploy to testing') {
//                     steps {
//                         script {
//                             openshift.withCluster() {
//                                 openshift.withProject() {
//                                     openshiftDeploy(namespace: TEST_ENVIRONMENT,
//                                             deploymentConfig: APP_NAME,
//                                             waitTime: '300000')
//                                 }
//                             }
//                         }
//                     }
//                 }




//         stage('Build Image and Deploy on Build Environment') {
//             steps {
//                 sh("./mvnw fabric8:deploy --settings helsana.settings.xml -Pcloud -DskipTests -Dfabric8.namespace=$DEV_ENVIRONMENT -Djgitver.use-version=$NEXT_VERSION")
//                 // Verify Deployment
//                 script {
//                     openshift.withCluster() {
//                         openshift.withProject() {
//                             openshiftVerifyDeployment(namespace: DEV_ENVIRONMENT,
//                                     depCfg: APP_NAME,
//                                     replicaCount: '1',
//                                     verifyReplicaCount: 'true',
//                                     waitTime: '300000')
//                         }
//                     }
//                 }
//             }
//         }
//         stage('Deploy Image (myhelsana-test) ') {
//                     steps {
//                         sh("./mvnw fabric8:deploy --settings helsana.settings.xml -Pcloud -DskipTests -Dfabric8.namespace=$TEST_ENVIRONMENT -Djgitver.use-version=$NEXT_VERSION")
//                         // Verify Deployment
//                         script {
//                             openshift.withCluster() {
//                                 openshift.withProject() {
//                                     openshiftVerifyDeployment(namespace: TEST_ENVIRONMENT,
//                                             depCfg: APP_NAME,
//                                             replicaCount: '1',
//                                             verifyReplicaCount: 'true',
//                                             waitTime: '300000')
//                                 }
//                             }
//                         }
//                     }
//         }
   }
}
